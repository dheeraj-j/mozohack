import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
d_train=pd.read_csv("C:/Users/dheer/Desktop/Deep_Learning_A_Z/Recurrent_Neural_Networks/Google_Stock_Price_Train.csv")
d_train.head()
train=d_train.iloc[:, 1:2].values
from sklearn.preprocessing import MinMaxScaler
sc=MinMaxScaler(feature_range =(0,1))
scaled_train=sc.fit_transform(train)
x_train=[]
y_train=[]
for i in range(60,1258):
    x_train.append(scaled_train[i-60:i, 0])
    y_train.append(scaled_train[i, 0])
x_train=np.array(x_train)
y_train=np.array(y_train)
x_train=np.reshape(x_train,(x_train.shape[0],x_train.shape[1],1))
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout
regressor=Sequential()
regressor.add(LSTM(units=50,return_sequences=True,input_shape=(x_train.shape[1],1)))
regressor.add(Dropout(0.2))
regressor.add(LSTM(units=50,return_sequences=True))
regressor.add(Dropout(0.2))
regressor.add(LSTM(units=50,return_sequences=True))
regressor.add(Dropout(0.2))
regressor.add(LSTM(units=50,return_sequences=True))
regressor.add(Dropout(0.2))
regressor.add(LSTM(units=50,return_sequences=False))
regressor.add(Dropout(0.2))
regressor.add(Dense(units=1))
regressor.compile(optimizer='adam',loss ='mean_squared_error')
regressor.fit(x_train,y_train,epochs=100,batch_size=32)
d_test=pd.read_csv("C:/Users/dheer/Desktop/Deep_Learning_A_Z/Recurrent_Neural_Networks/Google_Stock_Price_Test.csv")
d_test.head()
test=d_test.iloc[:, 1:2].values
test.shape
dataset=pd.concat((d_train['Open'],d_test['Open']), axis=0)
inputs=dataset[len(dataset)-len(d_test)-60: ].values
inputs=inputs.reshape(-1,1)
inputs.shape
inputs=sc.transform(inputs) 
x_test=[]
for i in range(60,80):
    x_test.append(inputs[i-60:i, 0])
  #  y_train.append(scaled_train[i, 0])
x_test=np.array(x_test)
x_test
x_test=np.reshape(x_test,(x_test.shape[0],x_test.shape[1],1))
predicted_price=regressor.predict(x_test)
predicted_price=sc.inverse_transform(predicted_price)
predicted_price
plt.plot(test,color='red',label='Real google stocks')
plt.plot(predicted_price,color='blue',label='Predicted stock price')
plt.xlabel('time')
plt.ylabel('prices')
plt.legend()
plt.show()
